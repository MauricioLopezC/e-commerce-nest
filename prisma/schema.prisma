// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Product {
  id             Int          @id @default(autoincrement())
  name           String
  price          Float
  description    String
  category       String
  sex            String
  unitsOnOrder   Float        @default(0)
  totalCollected Float        @default(0)
  images         Image[]
  cartItem       CartItem[]
  productSku     ProductSku[]
  favorites      Favorite[]
  orderItems     OrderItem[]
  userReviews    UserReview[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductSku {
  id         Int         @id @default(autoincrement())
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  size       String
  color      String
  quantity   Int
  cartItem   CartItem[]
  orderItems OrderItem[]
  images     Image[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Image {
  id           Int        @id @default(autoincrement())
  imgSrc       String
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    Int
  productSkuId Int
  productSku   ProductSku @relation(fields: [productSkuId], references: [id], onDelete: Cascade)
}

model User {
  id            Int          @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String       @unique
  verifiedEmail Boolean      @default(false)
  role          String       @default("USER")
  password      String
  cart          Cart?
  favorites     Favorite[]
  order         Order[]
  userReviews   UserReview[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model UserReview {
  id          Int      @id @default(autoincrement())
  userId      Int
  productId   Int
  orderItemId Int      @unique
  score       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id])
  orderItem OrderItem @relation(fields: [orderItemId], references: [id])
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int        @unique //necesary for one to one relations
  updatedAt DateTime   @updatedAt
  CartItem  CartItem[]
}

model CartItem {
  id           Int        @id @default(autoincrement())
  cart         Cart       @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId       Int
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    Int
  productSku   ProductSku @relation(fields: [productSkuId], references: [id], onDelete: Cascade)
  productSkuId Int
  quantity     Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([productSkuId, cartId])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId])
  @@map("Favorites")
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  status     String      @default("IN_PROGRESS")
  total      Float
  orderItems OrderItem[]
  payment    Payment?
  Shipping   Shipping?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id           Int         @id @default(autoincrement())
  orderId      Int
  productId    Int
  productSkuId Int
  quantity     Int
  price        Float
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  userReviews  UserReview? //for check if user has ordered that product

  order      Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productSku ProductSku @relation(fields: [productSkuId], references: [id], onDelete: Cascade)
}

//OrderItem price it is not redundant because the price of the products
//can change while the price of the order has to remain fixed.

model Payment {
  id        Int      @id @default(autoincrement())
  orderId   Int      @unique
  provider  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Shipping {
  id         Int      @id @default(autoincrement())
  orderId    Int      @unique
  country    String
  city       String
  postalCode String
  adress     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

//consider change Purchases name for Orders

//implementar los siguientes modelos:
//Payments, references to PurchaseId
